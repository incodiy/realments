Struktur Package Final:

incodiy/
└── realements/
    ├── config/
    │   └── realements.php
    ├── resources/
    │   ├── js/
    │   │   ├── components/
    │   │   │   ├── Form.jsx
    │   │   │   └── Select.jsx
    │   │   └── app.js
    │   └── views/
    │       └── form.blade.php
    ├── src/
    │   ├── FormBuilder.php
    │   └── RealementsServiceProvider.php
    └── composer.json

Penjelasan alur kerja:

    Service Provider akan:

    Mempublish konfigurasi

    Mempublish view dan komponen React

    Registrasi facade dan helper function

    Flow Data:

    Controller memanggil FormBuilder

    FormBuilder mengumpulkan konfigurasi

    View form.blade.php me-render container dan menyediakan data ke React

    React components membaca data dari window.realementsData

    Komponen Form mengatur layout form lengkap

    Komponen Select menangani logika multi-select dan dynamic elements

    use Incodiy\Realements\Facades\Realements;

class FormController extends Controller
{
    public function show()
    {
        $form = Realements::open(['action' => '/submit', 'class' => 'my-form'])
            ->select('Country Selection', ['id' => 'us', 'id' => 'gb'], [
                'multiselect' => true,
                'addable' => true,
                'maxAdd' => 3,
                'selected' => ['us'],
                'buttonPosition' => 'left'
            ])
            ->close(false) // Nonaktifkan submit button default
            ->render();
            
        return view('form', compact('form'));
    }
}









Prompt:

Ini saya kasih semua file yang sudah kita buat ya biar lebih mudah tracingnya:

1. Kode pada file resources/js/realments/components/CheckboxInput.jsx:
import React from 'react';

function CheckboxInput(props) {
  const { name, label, options, value, errors, classes } = props;

  // If multiple options (array of {value,label}), render multiple checkboxes
  if (options && options.length) {
    return (
      <div className="mb-4">
        {label && <label className={classes.label}>{label}</label>}
        {options.map((opt, idx) => (
          <div key={idx}>
            <label>
              <input
                type="checkbox"
                name={`${name}[]`}
                value={opt.value}
                defaultChecked={Array.isArray(value) && value.includes(opt.value)}
              />
              {' '}{opt.label}
            </label>
          </div>
        ))}
        {errors[name] && (
          <div className={classes.error}>{errors[name][0]}</div>
        )}
      </div>
    );
  }

  // Single checkbox
  return (
    <div className="mb-4">
      <label className="flex items-center">
        <input
          type="checkbox"
          name={name}
          value="1"
          defaultChecked={!!value}
          className={classes.input}
        />
        <span className={classes.label}>{label}</span>
      </label>
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default CheckboxInput;


2. Kode pada file resources/js/realments/components/DateInput.jsx:
import React, { useState } from 'react';

function DateInput(props) {
  const { name, label, value, add, max, errors, classes } = props;
  const [values, setValues] = useState(add ? value : [value || '']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <input
              type="date"
              name={`${name}[]`}
              value={val}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="date"
        name={name}
        defaultValue={value}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default DateInput;

3. Kode pada file resources/js/realments/components/EmailInput.jsx:
import React, { useState } from 'react';

function EmailInput(props) {
  const { name, label, placeholder, value, add, max, errors, classes } = props;
  const [values, setValues] = useState(add ? value : [value || '']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <input
              type="email"
              name={`${name}[]`}
              value={val}
              placeholder={placeholder}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="email"
        name={name}
        defaultValue={value}
        placeholder={placeholder}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default EmailInput;


4. Kode pada file resources/js/realments/components/FileInput.jsx:
import React from 'react';

function FileInput(props) {
  const { name, label, errors, classes } = props;

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="file"
        name={name}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default FileInput;


5. Kode pada file resources/js/realments/components/NumberInput.jsx:
import React, { useState } from 'react';

function NumberInput(props) {
  const { name, label, placeholder, value, add, max, errors, classes } = props;
  const [values, setValues] = useState(add ? value : [value || '']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <input
              type="number"
              name={`${name}[]`}
              value={val}
              placeholder={placeholder}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="number"
        name={name}
        defaultValue={value}
        placeholder={placeholder}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default NumberInput;


6. Kode pada file resources/js/realments/components/PasswordInput.jsx:
import React, { useState } from 'react';

function PasswordInput(props) {
  const { name, label, placeholder, value, add, max, errors, classes } = props;
  const [values, setValues] = useState(add ? value : ['']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <input
              type="password"
              name={`${name}[]`}
              value={val}
              placeholder={placeholder}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="password"
        name={name}
        defaultValue={value}
        placeholder={placeholder}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default PasswordInput;


7. Kode pada file resources/js/realments/components/RadioInput.jsx:
import React from 'react';

function RadioInput(props) {
  const { name, label, options, value, errors, classes } = props;

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      {options.map((opt, idx) => (
        <div key={idx}>
          <label>
            <input
              type="radio"
              name={name}
              value={opt.value}
              defaultChecked={value === opt.value}
              className="mr-2"
            />
            {opt.label}
          </label>
        </div>
      ))}
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default RadioInput;


8. Kode pada file resources/js/realments/components/SelectInput.jsx:
import React, { useState } from 'react';

function SelectInput(props) {
  const {
    name,
    label,
    options = [],
    value,
    add,
    max,
    errors = {},
    classes = {},
  } = props;

  const initialValues = add ? (Array.isArray(value) ? value : [value || '']) : [value || ''];
  const [values, setValues] = useState(initialValues);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };

  const handleRemove = (index) => {
    const newVals = [...values];
    newVals.splice(index, 1);
    setValues(newVals);
  };

  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  const renderOptions = () =>
    options.map((opt, idx) => {
      if (typeof opt === 'object') {
        return (
          <option key={idx} value={opt.value}>
            {opt.label}
          </option>
        );
      }
      return (
        <option key={idx} value={opt}>
          {opt}
        </option>
      );
    });

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2 flex items-center gap-2">
            <div className="flex-1">
              {label && idx === 0 && <label className={classes.label}>{label}</label>}
              <select
                name={`${name}[]`}
                value={val}
                className={classes.input}
                onChange={(e) => handleChange(idx, e)}
              >
                <option value="">-- Select --</option>
                {renderOptions()}
              </select>
              {errors[name] && idx === 0 && (
                <div className={classes.error}>{errors[name][0]}</div>
              )}
            </div>
            {values.length > 1 && (
              <button
                type="button"
                className={`${classes.button} bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded`}
                onClick={() => handleRemove(idx)}
              >
                &times;
              </button>
            )}
          </div>
        ))}
        {(!max || values.length < max) && (
          <button
            type="button"
            className={`${classes.button} mt-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded`}
            onClick={handleAdd}
          >
            Add {label || name}
          </button>
        )}
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <select name={name} defaultValue={value} className={classes.input}>
        <option value="">-- Select --</option>
        {renderOptions()}
      </select>
      {errors[name] && <div className={classes.error}>{errors[name][0]}</div>}
    </div>
  );
}

export default SelectInput;


9. Kode pada file resources/js/realments/components/TextareaInput.jsx:
import React, { useState } from 'react';

function TextareaInput(props) {
  const { name, label, placeholder, value, add, max, errors, classes } = props;
  const [values, setValues] = useState(add ? value : [value || '']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <textarea
              name={`${name}[]`}
              value={val}
              placeholder={placeholder}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <textarea
        name={name}
        defaultValue={value}
        placeholder={placeholder}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default TextareaInput;


10. Kode pada file resources/js/realments/components/TextInput.jsx:
import React, { useState } from 'react';

function TextInput(props) {
  const { name, label, placeholder, value, add, max, errors, classes } = props;
  // Initialize values array (for add-more feature)
  const [values, setValues] = useState(add ? value : [value || '']);

  const handleAdd = () => {
    if (!max || values.length < max) {
      setValues([...values, '']);
    }
  };
  const handleChange = (index, e) => {
    const newVals = [...values];
    newVals[index] = e.target.value;
    setValues(newVals);
  };

  // Render multiple inputs if add=true
  if (add) {
    return (
      <div className="mb-4">
        {values.map((val, idx) => (
          <div key={idx} className="mb-2">
            {label && <label className={classes.label}>{label}</label>}
            <input
              type="text"
              name={`${name}[]`}
              value={val}
              placeholder={placeholder}
              className={classes.input}
              onChange={(e) => handleChange(idx, e)}
            />
            {errors[name] && (
              <div className={classes.error}>{errors[name][0]}</div>
            )}
          </div>
        ))}
        <button
          type="button"
          className={classes.button}
          onClick={handleAdd}
        >
          Add {label || name}
        </button>
      </div>
    );
  }

  // Single input case
  return (
    <div className="mb-4">
      {label && <label className={classes.label}>{label}</label>}
      <input
        type="text"
        name={name}
        defaultValue={value}
        placeholder={placeholder}
        className={classes.input}
      />
      {errors[name] && (
        <div className={classes.error}>{errors[name][0]}</div>
      )}
    </div>
  );
}

export default TextInput;



11. Kode pada file resources/js/realments/index.jsx:
import React from 'react';
import ReactDOM from 'react-dom/client';
import Realments from './Realments';

// Ekspos komponen Realments ke window agar bisa dipanggil di Blade langsung
if (typeof window !== 'undefined') {
    window.Realments = Realments;
    window.React = React;
    window.ReactDOM = ReactDOM;
}

// **Optional**: auto render jika container dan data tersedia
document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('realmentsForm');
    if (container && window.realmentsData) {
        // React 18+ pakai createRoot
        const root = ReactDOM.createRoot(container);
        root.render(<Realments {...window.realmentsData} />);
    }
});

export default Realments;


12. Kode pada file resources/js/realments/Realments.jsx:
import React from 'react';
import TextInput from './components/TextInput';
import EmailInput from './components/EmailInput';
import PasswordInput from './components/PasswordInput';
import NumberInput from './components/NumberInput';
import DateInput from './components/DateInput';
import TextareaInput from './components/TextareaInput';
import SelectInput from './components/SelectInput';
import FileInput from './components/FileInput';
import CheckboxInput from './components/CheckboxInput';
import RadioInput from './components/RadioInput';

function Realments(props) {
  // const { fields, action, method, errors, classes } = props;
  const { fields, action, method, errors, classes, submitLabel } = props;

  // Function to choose which component to render
  const renderField = (field, index) => {
    const commonProps = {
      key: index,
      errors: errors,
      classes: classes,
      ...field,
    };

    // Normalize addable prop for frontend use
    const normalizedField = {
      ...commonProps,
      add: field.addable ?? field.add ?? false,
    };

    switch (field.type) {
      case 'text':
        return <TextInput {...normalizedField} />;
      case 'email':
        return <EmailInput {...normalizedField} />;
      case 'password':
        return <PasswordInput {...normalizedField} />;
      case 'number':
        return <NumberInput {...normalizedField} />;
      case 'date':
        return <DateInput {...normalizedField} />;
      case 'textarea':
        return <TextareaInput {...normalizedField} />;
      case 'select':
        return <SelectInput {...normalizedField} />;
      case 'file':
        return <FileInput {...normalizedField} />;
      case 'checkbox':
        return <CheckboxInput {...normalizedField} />;
      case 'radio':
        return <RadioInput {...normalizedField} />;
      default:
        return null;
    }
  };

  return (
    <form action={action} method={method} encType="multipart/form-data">
      {fields.map((field, index) => renderField(field, index))}
      <div className="mt-4">
        <button type="submit" className={classes.button}>
          {submitLabel || 'Submit'}
        </button>
      </div>
    </form>
  );
}

export default Realments;


13. Kode pada file resources/views/realments/index.blade.php:
@isset($realmentForms)
  @if (!empty($realmentForms))
    {!! $realmentForms !!}
    @include('realments.scripts')
  @endif
@endisset


14. Kode pada file resources/views/realments/scripts.blade.php:
{{-- resources/views/vendor/realments/scripts.blade.php --}}
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="{{ asset('vendor/realments/js/realments.js') }}"></script>

<script>
    window.realmentsData = {!! json_encode(session()->pull('realmentsData', [])) !!};

    document.addEventListener('DOMContentLoaded', function () {
        if (window.realmentsData && window.React && window.ReactDOM && window.Realments) {
            Object.entries(window.realmentsData).forEach(([id, data]) => {
                const container = document.getElementById(id);
                if (container) {
                    const root = ReactDOM.createRoot(container);
                    root.render(React.createElement(Realments, data));
                }
            });
        }
    });
</script>



15. Kode vendor packagenya pada file incodiy/realments/src/Traits/RealmentsForm.php:
<?php
namespace Incodiy\Realments\Traits;

trait RealmentsForm
{
    protected $fields = [];
    protected $formAttributes = [];

    public function open($attrs = [])
    {
        $this->formAttributes = $attrs;

        // Set default classes jika belum ada
        if (!isset($this->formAttributes['classes'])) {
            $this->formAttributes['classes'] = [
                'input'  => 'border border-gray-300 p-2 rounded w-full',
                'label'  => 'block font-medium mb-1',
                'error'  => 'text-red-600 text-sm mt-1',
                'button' => 'bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded',
            ];
        }

        // Errors default kosong jika tidak ada
        if (!isset($this->formAttributes['errors'])) {
            $this->formAttributes['errors'] = [];
        }

        return $this;
    }

    protected function addField($type, $name, $attrs = [])
    {
        $attrs['type'] = $type;
        $attrs['name'] = $name;

        if (isset($attrs['addable'])) {
            $attrs['add'] = $attrs['addable'];
            unset($attrs['addable']);
        }

        $this->fields[] = $attrs;

        return $this;
    }

    public function text($name, $attrs = [])    { return $this->addField('text', $name, $attrs); }
    public function email($name, $attrs = [])   { return $this->addField('email', $name, $attrs); }
    public function password($name, $attrs = []){ return $this->addField('password', $name, $attrs); }
    public function number($name, $attrs = [])  { return $this->addField('number', $name, $attrs); }
    public function date($name, $attrs = [])    { return $this->addField('date', $name, $attrs); }
    public function textarea($name, $attrs = []){ return $this->addField('textarea', $name, $attrs); }
    public function select($name, $attrs = [])  { return $this->addField('select', $name, $attrs); }
    public function file($name, $attrs = [])    { return $this->addField('file', $name, $attrs); }
    public function checkbox($name, $attrs = []){ return $this->addField('checkbox', $name, $attrs); }
    public function radio($name, $attrs = [])   { return $this->addField('radio', $name, $attrs); }

    public function close($submitLabel = 'Submit')
    {
        $this->formAttributes['submitLabel'] = $submitLabel;

        // Set final data for render
        $data = [
            'action'      => $this->formAttributes['action'] ?? '',
            'method'      => $this->formAttributes['method'] ?? 'POST',
            'fields'      => $this->fields,
            'errors'      => $this->formAttributes['errors'] ?? [],
            'classes'     => $this->formAttributes['classes'] ?? [
                'input'  => 'border border-gray-300 p-2 rounded w-full',
                'label'  => 'block font-medium mb-1',
                'error'  => 'text-red-600 text-sm mt-1',
                'button' => 'bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded',
            ],
            'submitLabel' => $submitLabel,
        ];

        $this->formAttributes = $data;

        return $this;
    }

    public function render()
    {
        // Return html + script for React to consume
        return '<script>window.realmentsData = ' . json_encode($this->formAttributes) . ';</script><div id="realmentsForm"></div>';
    }

    // Optional: getter fields dan formAttributes, kalau mau manual akses
    public function getFields()
    {
        return $this->fields;
    }

    public function getFormAttributes()
    {
        return $this->formAttributes;
    }
}


16. Kode vendor packagenya pada file incodiy/realments/src/Realments.php:
<?php
namespace Incodiy\Realments;

class Realments
{
    protected $fields = [];
    protected $action = '';
    protected $method = 'POST';
    protected $framework = 'tailwind';

    /**
     * Open a form with given attributes (action, method, etc).
     */
    public function open($attributes = [])
    {
        $this->action    = $attributes['action'] ?? '';
        $this->method    = $attributes['method'] ?? 'POST';
        $this->framework = config('realments.framework', 'tailwind');
        return $this;
    }

    protected array $formsBuffer = [];

    /**
     * Close the form: prepare data and return HTML for React.
     */
    public function close($id = null)
    {
        static $formCount = 0;
        $formCount++;

        $id = 'realmentsForm_' . uniqid() . '_' . $formCount;
        
        // Prepare data to pass to React
        $data = [
            'fields'    => $this->fields,
            'action'    => $this->action,
            'method'    => $this->method,
            'framework' => $this->framework,
            'errors'    => session('errors') ? session('errors')->getMessages() : [],
            'old'       => session()->getOldInput(),
            'classes'   => config("realments.{$this->framework}")
        ];

        // Simpan ke sesi agar bisa diakses dari view
        $existing = session()->get('realmentsData', []);
        $existing[$id] = $data;
        session()->put('realmentsData', $existing);
        
        // Reset fields for reuse
        $this->fields = [];
        $this->action = '';
        $this->method = 'POST';
        $this->framework = config('realments.framework', 'tailwind');

        // Encode data safely for JavaScript with htmlspecialchars
        $jsonData = htmlspecialchars(json_encode($data), ENT_QUOTES, 'UTF-8');

        // Decode the HTML entities back to normal characters for JSON.parse
        $jsonData = htmlspecialchars_decode($jsonData, ENT_QUOTES);

        // Return container and mounting scripts
        // return "<div id=\"{$id}\"></div>";

        $html = <<<HTML
<div id="{$id}"></div>
<script>
    window.realmentsData = window.realmentsData || {};
    window.realmentsData['{$id}'] = JSON.parse('{$jsonData}');
</script>
HTML;

        $this->formsBuffer[] = $html;

        return ''; // Optional: return single form if needed
    }

    public function render()
    {
        return implode("\n", $this->formsBuffer);
    }

    /**
     * Add a field definition to the form.
     */
    protected function addField($type, $name, $attrs)
    {
        $field = [
            'type'        => $type,
            'name'        => $name,
            'label'       => $attrs['label'] ?? ucfirst($name),
            'placeholder' => $attrs['placeholder'] ?? '',
            'add'         => $attrs['add'] ?? false,
            'max'         => $attrs['max'] ?? null,
            'position'    => $attrs['position'] ?? 'bottom',
            'options'     => $attrs['options'] ?? [],
        ];

        // Handle old input or default values
        if ($field['add']) {
            // For dynamic fields, expect an array of values
            $oldValues = session()->getOldInput($name, []);
            if (!is_array($oldValues) || empty($oldValues)) {
                $field['value'] = [''];
            } else {
                $field['value'] = $oldValues;
            }
        } else {
            // Single value
            $field['value'] = session()->getOldInput($name, $attrs['value'] ?? '');
        }

        $this->fields[] = $field;
        return $this;
    }

    // Define methods for each input type
    public function text($name, $attrs = [])      { return $this->addField('text', $name, $attrs); }
    public function email($name, $attrs = [])     { return $this->addField('email', $name, $attrs); }
    public function password($name, $attrs = [])  { return $this->addField('password', $name, $attrs); }
    public function number($name, $attrs = [])    { return $this->addField('number', $name, $attrs); }
    public function date($name, $attrs = [])      { return $this->addField('date', $name, $attrs); }
    public function textarea($name, $attrs = [])  { return $this->addField('textarea', $name, $attrs); }
    public function select($name, $attrs = [])    { return $this->addField('select', $name, $attrs); }
    public function file($name, $attrs = [])      { return $this->addField('file', $name, $attrs); }
    public function checkbox($name, $attrs = [])  { return $this->addField('checkbox', $name, $attrs); }
    public function radio($name, $attrs = [])     { return $this->addField('radio', $name, $attrs); }
}


17. Kode vendor packagenya pada file incodiy/realments/src/RealmentsServiceProvider.php:
<?php
namespace Incodiy\Realments;

use Illuminate\Support\ServiceProvider;

class RealmentsServiceProvider extends ServiceProvider
{
    public function register()
    {
        // Merge default config
        $this->mergeConfigFrom(__DIR__.'/../config/realments.php', 'realments');

        // Bind a singleton Realments instance
        $this->app->singleton('realments', function ($app) {
            return new Realments();
        });
    }

    public function boot()
    {
        // Publish configuration
        $this->publishes([
            __DIR__.'/../config/realments.php' => config_path('realments.php'),
        ], 'realments-config');

        // Publish compiled React assets
        $this->publishes([
            __DIR__.'/../resources/js/' => resource_path('js/'),
            __DIR__.'/../resources/views/' => resource_path('views/'),
        ], 'realments-assets');

        // Publish views
        $this->loadViewsFrom(__DIR__.'/../resources/views', 'realments');
        /*
        // Blade directive custom
        \Blade::directive('realmentsForm', function () {
            return "<?php echo view('realments::index')->render(); ?>";
        });

        \Blade::directive('realmentsScripts', function () {
            return "<?php echo view('realments::scripts')->render(); ?>";
        });*/
    }
}



Dari keseluruhan kode-kode yang sudah kita buat tersebut, bisakah kamu update secara lengkap kodenya pada file-file mana saja dan bagaimana kodenya yang harus diperbaiki agar aplikasi/packagenya dapat berjalan sesuai dengan logic yang sudah kita bicarakan?